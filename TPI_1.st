Object subclass: #Archivo	instanceVariableNames: 'tramites'	classVariableNames: ''	package: 'TPI_1'!!Archivo methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:19'!archivarTramite: unTramite	"Metodo para archivar tramites"	(unTramite estado = 'Procesado' or: unTramite estado = 'Rechazado' ) 			ifTrue: [ tramites add: unTramite ].	! !!Archivo methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:18'!listarRechazados	"Aqui se informa los tramites rechazados"	|aux informe|	informe := ''.	informe := informe, 'Listado de tramites rechazados: ', String cr.	aux := tramites select: [ :x | x estado = 'Rechazado' ].	(aux isNotEmpty ) 		ifTrue: [ aux do: [ 				 	:tramite | informe := informe, String cr, 'Tipo de tramite: ', (tramite class) 					asString,' - Nro Tramite: ', tramite nroTramite asString, ' - Fecha: ', tramite fecha 					asString, ' - Descripcion: ' ,tramite descripcion  .]. ].	^informe! !!Archivo methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:18'!filtrarPlanillaDesde: unaFecha hasta: otraFecha	"Aqui se filtran las planillas tomando de una fecha a otra"	|planillas planFecha aux|	aux := ''.	planillas := tramites select: [ :part | part isKindOf: PlanillaPartido].	(planillas isNotEmpty)		ifTrue: [ planFecha := planillas select: [ :plan | plan fecha > unaFecha and: plan fecha < otraFecha]. ].			planFecha do: [ :x | aux := aux, x asString, String cr. ].	^ aux 		! !!Archivo methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:19'!buscarTramite: unNumeroTramite	"Se busca tramite por el numeo del mismo"	| tram |	tram := tramites detect: [ :tramite | tramite nroTramite = unNumeroTramite ] ifNone: [ tram :=  nil]. 	^tram asString	! !!Archivo methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:18'!montoTotalDesde: unaFecha hasta: otraFecha	"Monto total desde una fecha hasta otra"	|transfer acuMontoFecha|	transfer := tramites select: [ :tram | tram isKindOf: Transferencia ].	acuMontoFecha := 0. 	(transfer isNotEmpty)		ifTrue: [ transfer do: [ :trans | (trans fecha > unaFecha and: trans fecha < otraFecha )															ifTrue: [ acuMontoFecha := acuMontoFecha + trans monto ].  ]. ].	^acuMontoFecha  ! !!Archivo methodsFor: 'initialization' stamp: 'SVB 9/4/2021 11:48'!initialize	tramites := OrderedCollection new.! !Object subclass: #BandejaCarga	instanceVariableNames: 'planillas archivo'	classVariableNames: ''	package: 'TPI_1'!!BandejaCarga methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:16'!cantidadPlanillas	"Devuelve la cantidad de planillas dentro de la coleccion"	^ planillas size.! !!BandejaCarga methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:20'!encolarCarga: unaPlanilla	"Para agregar una planilla a la lista de planillas"	planillas add: unaPlanilla.! !!BandejaCarga methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:05'!archivo	^ archivo! !!BandejaCarga methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:05'!archivo: anObject	archivo := anObject! !!BandejaCarga methodsFor: 'accessing' stamp: 'SVB 9/15/2021 21:14'!getPartidoCargar	"Muestra el partido con la fecha mas antigua. devuelve nil si no esta"	| partido |		partido := planillas detect: [ :x | x = planillas first ] ifNone: [ partido := nil ].	^ partido asString! !!BandejaCarga methodsFor: 'accessing' stamp: 'SVB 9/15/2021 21:15'!procesarPartido: unNumeroPartido	"Recibe un numero de partido y lo procesa para enviarlo a Archivo"	| partido |	partido := planillas		detect: [ :part | part nroPartido = unNumeroPartido ]		ifNone: [ partido := nil ].	partido isNotNil		ifFalse: [ ^ self ].	partido estado: 'Procesado'.	archivo archivarTramite: partido.	planillas remove: partido.! !!BandejaCarga methodsFor: 'initialization' stamp: 'SVB 9/13/2021 14:54'!initialize 	planillas := (SortedCollection new) sortBlock: [ :x :y | x fecha < y fecha ].	archivo := Archivo new.! !Object subclass: #BandejaEntrada	instanceVariableNames: 'nroSiguiente bandejaCarga bandejaGestion archivo contadorTramites'	classVariableNames: ''	package: 'TPI_1'!!BandejaEntrada methodsFor: 'initialization' stamp: 'SVB 9/14/2021 21:04'!initialize 	nroSiguiente := 1.	bandejaCarga := nil.	bandejaGestion := nil.	archivo := nil.	contadorTramites := 0.! !!BandejaEntrada methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 16:13'!verSiguienteNumero	^ nroSiguiente. ! !!BandejaEntrada methodsFor: 'as yet unclassified' stamp: 'SVB 9/14/2021 11:03'!tramitesAceptados	^contadorTramites ! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!bandejaGestion: anObject	bandejaGestion := anObject! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/15/2021 16:03'!aceptarTramite: unTramite	unTramite setNumeros: nroSiguiente.	nroSiguiente := nroSiguiente + 1.	unTramite validar		ifTrue: [ unTramite estado: 'Pendiente' ]		ifFalse: [ unTramite estado: 'Rechazado'. 					archivo archivarTramite: unTramite. ].	unTramite estado = 'Pendiente'		ifFalse: [ ^ self ].	contadorTramites := contadorTramites + 1.	(unTramite isKindOf: Transferencia)		ifTrue: [ bandejaGestion encolarGestion: unTramite ]		ifFalse: [ bandejaCarga encolarCarga: unTramite ]! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!bandejaGestion	^ bandejaGestion! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!bandejaCarga: anObject	bandejaCarga := anObject! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!bandejaCarga	^ bandejaCarga! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!archivo: anObject	archivo := anObject! !!BandejaEntrada methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!archivo	^ archivo! !Object subclass: #BandejaGestion	instanceVariableNames: 'transferencias montoAcumulado archivo'	classVariableNames: ''	package: 'TPI_1'!!BandejaGestion methodsFor: 'accessing' stamp: 'SVB 9/15/2021 21:12'!aprobarTransferencia: unNumeroTramite monto: unMonto	"Aprueba una transferencia recibiendo un numero de tramite y un monto. 	Luego saca ese tramite encotrado de la lista de pendientes porque fue procesado"	| transferencia |	transferencia := transferencias		detect: [ :trans | trans nroTramite = unNumeroTramite ]		ifNone: [ transferencia := nil ].	transferencia isNotNil		ifTrue: [ 					transferencia aprobar: unMonto.					montoAcumulado := transferencia monto + montoAcumulado.					archivo archivarTramite: transferencia. 					].	transferencias remove: transferencia.! !!BandejaGestion methodsFor: 'accessing' stamp: 'SVB 9/15/2021 21:14'!getTransferencia	"Muestra la transferencia mas antigua de la cola. devuelve nil si no esta"	| transferencia |		transferencia := transferencias detect: [ :x | x = transferencias last ] ifNone: [ transferencia := nil ].		^ transferencia asString! !!BandejaGestion methodsFor: 'accessing' stamp: 'SVB 9/15/2021 21:11'!montoTotal 	"Retorna el monto acumulado las transferencias aprobadas"	^montoAcumulado ! !!BandejaGestion methodsFor: 'accessing' stamp: 'SVB 9/14/2021 21:04'!archivo: anObject	archivo := anObject! !!BandejaGestion methodsFor: 'accessing' stamp: 'SVB 9/13/2021 12:06'!archivo	^ archivo! !!BandejaGestion methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:20'!encolarGestion: unaTransferencia	"Para agregar una transferencia a la lista de transferencias"	transferencias add: unaTransferencia.! !!BandejaGestion methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:17'!cantidadTransferencias 	"Devuelve la cantidad de transferencias dentro de la coleccion"	^ transferencias size		! !!BandejaGestion methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:13'!rechazarTransferencia: unNumeroTramite observaciones: unaObservacion	"Rechaza una transferencia recibiendo un numero de tramite y una observacion. 	Luego saca ese tramite encotrado de la lista de pendientes porque fue rechazado"	|transferencia|	transferencia := transferencias detect: [ :trans | trans nroTramite = unNumeroTramite ] ifNone: [ transferencia := nil ].	(transferencia isNotNil )		ifTrue: [ transferencia rechazar: unaObservacion.					archivo archivarTramite: transferencia.			 ].	transferencias remove: transferencia.		! !!BandejaGestion methodsFor: 'initialization' stamp: 'SVB 9/14/2021 21:04'!initialize 	transferencias := OrderedCollection new. 	montoAcumulado := 0.0.	archivo := nil.! !Object subclass: #Documento	instanceVariableNames: 'tipo titulo path'	classVariableNames: ''	package: 'TPI_1'!!Documento methodsFor: 'initialization' stamp: 'SVB 8/23/2021 19:41'!initialize 	tipo := ''.	titulo := ''.	path := ''.! !!Documento methodsFor: 'converting' stamp: 'SVB 9/8/2021 22:21'!asString 	| aux |	aux := 'Nombre del documento: ', titulo , ' - Tipo: ', tipo , ' - Ruta del documento: ', path.	^ aux ! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!titulo	^ titulo! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!tipo	^ tipo! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!path: anObject	path := anObject! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!titulo: anObject	titulo := anObject! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!path	^ path! !!Documento methodsFor: 'accessing' stamp: 'SVB 8/23/2021 19:40'!tipo: anObject	tipo := anObject! !!Documento methodsFor: 'comparing' stamp: 'SVB 9/15/2021 21:09'!= otroPath	"Valida si un path es igual a otro"	^ path = otroPath path.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Documento class	instanceVariableNames: ''!!Documento class methodsFor: 'as yet unclassified' stamp: 'SVB 8/31/2021 11:39'!tipo: unTexto titulo: otroTexto path: unPath	|unDocumento|	unDocumento := Documento new.	unDocumento tipo: unTexto; titulo: otroTexto; path: unPath.	^ unDocumento ! !Object subclass: #Tramite	instanceVariableNames: 'nroTramite descripcion namePersona fecha estado documentaciones'	classVariableNames: ''	package: 'TPI_1'!!Tramite methodsFor: 'initialization' stamp: 'SVB 9/14/2021 09:37'!initialize 		nroTramite := 0.	descripcion := ''.	namePersona := ''.	fecha := Date new.	estado := ''.	documentaciones := Bag new.! !!Tramite methodsFor: 'initialization' stamp: 'SVB 9/8/2021 13:32'!setNumeros: unNumero	nroTramite := unNumero.	! !!Tramite methodsFor: 'converting' stamp: 'SVB 9/6/2021 19:39'!asString 	| aux |	aux := ''.	aux := aux, 'Numero de Tramite: ', nroTramite asString, ' - Descripcion: ', descripcion, String cr. 	aux := aux, ' - Nombre de persona: ', namePersona, String cr. 	aux := aux, ' - Fecha: ', fecha asString, ' - Estado: ', estado, String cr.	aux := aux,' - Listado de documentos: ', String cr. 	documentaciones do: [ :documentos | aux := aux, documentos asString, String cr. ].	^ aux! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!estado: anObject	estado := anObject! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!namePersona: anObject	namePersona := anObject! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!descripcion	^ descripcion! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/8/2021 18:49'!nroTramite	^ nroTramite! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!fecha	^ fecha! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!descripcion: anObject	descripcion := anObject! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!namePersona	^ namePersona! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!fecha: anObject	fecha := anObject! !!Tramite methodsFor: 'accessing' stamp: 'SVB 9/2/2021 09:14'!estado	^ estado! !!Tramite methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:10'!validar	"Usa un contador para contar si se cumple las condiciones de validacion para un Tramite"	|contAux|	contAux := 0.		(descripcion ~= '') ifTrue: [ contAux := contAux + 1 ].	(namePersona  ~= '') ifTrue: [ contAux := contAux + 1 ].	(documentaciones isNotEmpty) ifTrue: [ contAux := contAux + 1 ].	(nroTramite ~= 0) ifTrue: [ contAux := contAux + 1 ].		(contAux = 4)		ifTrue: [ ^true ]		ifFalse: [ ^false ].	! !!Tramite methodsFor: 'as yet unclassified' stamp: 'SVB 9/11/2021 21:06'!adjuntarDocumentos: unDocumento	|contAux|	contAux := 0.	documentaciones do: [ :doc | (unDocumento path = doc path) ifTrue: [ contAux := contAux + 1 ]. ].	(contAux = 0) 		ifTrue: [ documentaciones add: unDocumento ].	! !Tramite subclass: #PlanillaPartido	instanceVariableNames: 'nroPartido'	classVariableNames: ''	package: 'TPI_1'!!PlanillaPartido methodsFor: 'initialization' stamp: 'SVB 9/8/2021 13:19'!initialize	super initialize. 	nroPartido := 0.! !!PlanillaPartido methodsFor: 'accessing' stamp: 'SVB 9/2/2021 20:26'!nroPartido	^ nroPartido! !!PlanillaPartido methodsFor: 'accessing' stamp: 'SVB 9/2/2021 20:26'!nroPartido: anObject	nroPartido := anObject! !!PlanillaPartido methodsFor: 'converting' stamp: 'SVB 9/15/2021 09:41'!asString	| aux |	aux := 'Datos del partido: ', String cr,'Numero de partido: ', nroPartido asString, String cr, super 			asString, String cr. 	^ aux! !!PlanillaPartido methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:10'!validar	"Usa un contador para contar si se cumple las condiciones de validacion para una Planilla" 	|contAux contPdf|	super validar.		contAux := 0.	contPdf := 0.	(nroPartido > 0) ifTrue: [ contAux := contAux + 1 ].	(documentaciones isNotEmpty )		ifTrue: [ documentaciones do: [ :doc | (doc tipo = 'pdf') ifTrue: [ contPdf := contPdf + 1 ]. ].].	(contPdf >= 2) ifTrue: [ contAux := contAux + 1 ].		(contAux = 2)		ifTrue: [ ^true ] 		ifFalse: [ ^false ]. 				! !Tramite subclass: #Transferencia	instanceVariableNames: 'club nameJugador dniJugador monto observaciones'	classVariableNames: ''	package: 'TPI_1'!!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!monto: anObject	monto := anObject! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!nameJugador	^ nameJugador! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!monto	^ monto! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!observaciones: anObject	observaciones := anObject! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!dniJugador: anObject	dniJugador := anObject! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!club: anObject	club := anObject! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!club	^ club! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!nameJugador: anObject	nameJugador := anObject! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 9/15/2021 17:47'!rechazar: unaObservacion	estado := 'Rechazado'.	observaciones := unaObservacion.! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!observaciones	^ observaciones! !!Transferencia methodsFor: 'accessing' stamp: 'SVB 8/26/2021 10:30'!dniJugador	^ dniJugador! !!Transferencia methodsFor: 'converting' stamp: 'SVB 9/15/2021 09:40'!asString 	| aux |	aux := 'Datos de la transferencia: ', String cr, 'Club: ', club, 			' - Nombre del jugador: ', nameJugador, ' - dniJugador: ', dniJugador asString, String cr, 			' - Monto de la transferencia: ', monto asString, ' - Observaciones: ', observaciones, String 			cr, super asString, String cr.	^ aux ! !!Transferencia methodsFor: 'initialization' stamp: 'SVB 9/8/2021 13:19'!initialize 	super initialize.	club := ''.	nameJugador := ''.	dniJugador := 0.	monto := 0.0.	observaciones := ''.! !!Transferencia methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 21:11'!validar	"Usa un contador para contar si se cumple las condiciones de validacion para una Transferencia" 	|contAux contJpg contPdf|		super validar.	contAux := 0.	contJpg := 0.	contPdf := 0.	(nameJugador ~= '' ) ifTrue: [ contAux := contAux + 1 ].	(dniJugador ~= 0 ) ifTrue: [ contAux := contAux + 1 ].	(documentaciones isNotEmpty)		ifTrue: [ documentaciones do: 						[ :doc | (doc tipo = 'jpg' ) ifTrue: [ contJpg := contJpg + 1 ]. 						 (doc tipo = 'pdf') ifTrue: [ contPdf := contPdf + 1 ]. ]. ].	(contJpg = 2 and: contPdf >=1)		ifTrue: [ contAux := contAux + 1 ].	(contAux = 3)		ifTrue: [ ^true ]		ifFalse: [ ^false ].		! !!Transferencia methodsFor: 'as yet unclassified' stamp: 'SVB 9/15/2021 17:48'!aprobar: unMonto	estado := 'Procesado'.	monto := unMonto.! !